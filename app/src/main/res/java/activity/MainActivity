package com.example.myaccount.demo;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.example.myaccount.demo.rest.ApiClient;
import com.example.myaccount.demo.rest.ApiInterface;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class MainActivity extends AppCompatActivity implements LocationListener {

    private RecyclerView rv;
    private EditText et_search;
    private Button btn_search;
    private ApiInterface mApiClient;
    private Activity context = MainActivity.this;
    private LocationManager locationManager;
    double lat;
    double lng;
    String address0;
    String address1;
    String address2;
    private NearPlasceAdapter mAdapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        rv = findViewById(R.id.rv);
        et_search = findViewById(R.id.et_search);
        btn_search = findViewById(R.id.btn_search);


        btn_search.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                callApi();
            }
        });
        mApiClient = ApiClient.getRetrofitClient().create(ApiInterface.class);

        //region current location
        getLocation();
        //endregion
    }

    //region current location
    void getLocation() {
        try {
            locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
            locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 5000, 5, this);
        } catch (SecurityException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onLocationChanged(Location location) {

//        locationText.setText("Latitude: " + location.getLatitude() + "\n Longitude: " + location.getLongitude());
        lat = location.getLatitude();
        lng = location.getLongitude();

        Toast.makeText(context, "Latitude ==>> " + String.valueOf(lat), Toast.LENGTH_LONG).show();
        Toast.makeText(context, "Longitude ==>> " + String.valueOf(lng), Toast.LENGTH_LONG).show();

        try {
            Geocoder geocoder = new Geocoder(this, Locale.getDefault());
            List<Address> addresses = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);
            address0 = addresses.get(0).getAddressLine(0);
            address1 = addresses.get(0).getAddressLine(1);
            address2 = addresses.get(0).getAddressLine(2);

            Toast.makeText(context, "Address0 ==>> " + address0, Toast.LENGTH_LONG).show();
            Toast.makeText(context, "Address1 ==>> " + address1, Toast.LENGTH_LONG).show();
            Toast.makeText(context, "Address2 ==>> " + address2, Toast.LENGTH_LONG).show();

//            locationText.setText(locationText.getText() + "\n" + addresses.get(0).getAddressLine(0) + ", " +
//                    addresses.get(0).getAddressLine(1) + ", " + addresses.get(0).getAddressLine(2));
        } catch (Exception e) {

        }

    }

    @Override
    public void onProviderDisabled(String provider) {
        Toast.makeText(MainActivity.this, "Please Enable GPS and Internet", Toast.LENGTH_SHORT).show();
    }

    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {

    }

    @Override
    public void onProviderEnabled(String provider) {

    }
    //endregion

    private void callApi() {
        final ProgressDialog pg = new ProgressDialog(context);
        pg.setTitle("Please wait");
        pg.show();

        String latlng = String.valueOf(lat + "," + lng);
        if (mApiClient != null) {

            mApiClient.nearPlace(latlng, "1500", et_search.getText().toString(), "AIzaSyBbfbmSDaCz6QJWnVDBnRivJm2dtmg2hzg").enqueue(new Callback<ResponseBody>() {
                @Override
                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {
                    pg.dismiss();
                    if (response.isSuccessful()) {
                        ArrayList<GoogolePlaceModel> list = new ArrayList();

                        try {
                            ResponseBody mUser = response.body();
                            String mResponse = null;

                            mResponse = mUser != null ? mUser.string() : null;
                            JSONObject object = new JSONObject(mResponse);
                            Toast.makeText(context, "object" + object.toString(), Toast.LENGTH_SHORT).show();
                            JSONArray array = object.getJSONArray("results");
                            for (int i = 0; i < array.length(); i++) {
                                GoogolePlaceModel model = new GoogolePlaceModel();
                                JSONObject obj = array.getJSONObject(i);
                                model.setIcon(obj.getString("icon"));
                                model.setName(obj.getString("name"));

                                JSONObject objOpen = obj.getJSONObject("opening_hours");
                                model.setOpen(objOpen.getBoolean("open_now"));
                                model.setRating(obj.getDouble("rating"));
                                list.add(model);
                            }

                        } catch (IOException e) {
                            e.printStackTrace();
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                        mAdapter = new NearPlasceAdapter(list, context);
                        rv.setAdapter(mAdapter);
                        rv.setLayoutManager(new LinearLayoutManager(context));
                        Toast.makeText(context, "====>> Yeahh", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(context, "====>> Oops", Toast.LENGTH_SHORT).show();
                    }
                }

                @Override
                public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {
                    pg.dismiss();
                    Toast.makeText(context, "====>> Error", Toast.LENGTH_SHORT).show();
                }
            });
        }
    }
}
